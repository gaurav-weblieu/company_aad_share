package com.company.companyadda.Fragment;import android.Manifest;import android.app.Activity;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.drawable.Drawable;import android.graphics.fonts.Font;import android.graphics.pdf.PdfDocument;import android.media.MediaScannerConnection;import android.net.Uri;import android.os.Build;import android.os.Bundle;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.core.content.FileProvider;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.os.Environment;import android.provider.MediaStore;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.FrameLayout;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.company.companyadda.Activities.Company_search;import com.company.companyadda.Activities.Director_Related_comp;import com.company.companyadda.Adapter.Compnay_charges_list_adapter;import com.company.companyadda.Adapter.Dir_related_list_adapter;import com.company.companyadda.Adapter.Director_details_list_adapter;import com.company.companyadda.ApiModels.CompanyChargeModel;import com.company.companyadda.ApiModels.CompanyDetailsPojoClass;import com.company.companyadda.ApiModels.CompaySeacrhProfilePojoModel;import com.company.companyadda.ApiModels.RefreshComapnyResp;import com.company.companyadda.ApiModels.SerachDirectorListPojoModel;import com.company.companyadda.Pojo.AuthPojo;import com.company.companyadda.Pojo.CompanyChargesPojo;import com.company.companyadda.Pojo.SearchDirectorPojo;import com.company.companyadda.R;import com.google.gson.Gson;import org.w3c.dom.Document;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;public class CompanyDetils extends Fragment {    private static final int REQUEST_CODE_ASK_PERMISSIONS = 123;    private static final int REQUEST_PERMISSIONS = 1;    private RequestQueue mRequestQueue;    private String auth_Key;    TextView textView_name,textView_address,textView_detais1,textView_detais2,textView_detais3;    private String intent_no;    private String intent_radio;    ProgressBar progress_bar;    private String dir1Name;    private String dir2Name;    private String company_nam;    ImageView imageView_refres_compnay,imageView_refresh_dir;    ScrollView framLayout;    TextView textView_id,textView_cin_no,company_name_sec,company_reg_date,company_roc,company_status,company_cat,            company_class,company_sub_cat,company_auth_cap,company_paid_cap,company_reg_address,company_email,            company_last_agm,company_last_balancesheet,company_listing_status,            company_member,company_type;    TextView company_car_id,company_car_cin,company_char_sol_no,company_char_id,company_char_srn,company_char_holder,company_date_mod,            company_char_date_sat,company_char_amount,company_char_addres,company_char_hash,company_char_timestamp,company_char_status;    ImageView share_compnay;    TextView textView_no_data;    RecyclerView recycleView_comp_chares;    private TextView company_add_other_ro;    private TextView company_susp_stock;    private List<CompanyChargesPojo> arrayList_name=new ArrayList<>();    private List<SearchDirectorPojo> dir_sarch_arrayList_name=new ArrayList<>();    private RecyclerView recycleView_dir_det;    ScrollView z;    private TextView company_active_com;    private TextView company_time_stamp;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view= inflater.inflate(R.layout.fragment_company_detils, container, false);        framLayout =(ScrollView) view.findViewById(R.id.ScrollLayout);        z = (ScrollView) view.findViewById(R.id.ScrollLayout);        textView_name=view.findViewById(R.id.textView_name);        textView_address=view.findViewById(R.id.textView_address);        progress_bar=view.findViewById(R.id.progress_bar);        textView_detais1=view.findViewById(R.id.textView_detais1);        textView_detais2=view.findViewById(R.id.textView_detais2);        textView_detais3=view.findViewById(R.id.textView_detais3);        imageView_refres_compnay=view.findViewById(R.id.imageView_refres_compnay);        imageView_refresh_dir=view.findViewById(R.id.imageView_refresh_dir);        share_compnay=view.findViewById(R.id.share_compnay);        share_compnay.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SaveClick();            }        });      /*  textView_din=view.findViewById(R.id.textView_din);        textView_design=view.findViewById(R.id.textView_design);        textView_dir_name=view.findViewById(R.id.textView_dir_name);        textView_date=view.findViewById(R.id.textView_date);        textView_date_reg=view.findViewById(R.id.textView_date_reg);        textView_din1=view.findViewById(R.id.textView_din1);        textView_design1=view.findViewById(R.id.textView_design1);        textView_dir_name1=view.findViewById(R.id.textView_dir_name1);        textView_date1=view.findViewById(R.id.textView_date1);        textView_date_reg1=view.findViewById(R.id.textView_date_reg1);*/        recycleView_comp_chares=view.findViewById(R.id.recycleView_comp_chares);        recycleView_dir_det=view.findViewById(R.id.recycleView_dir_det);        company_time_stamp=view.findViewById(R.id.company_time_stamp);        textView_id=view.findViewById(R.id.textView_id);        textView_cin_no=view.findViewById(R.id.textView_cin_no);        company_name_sec=view.findViewById(R.id.company_name_sec);        company_reg_date=view.findViewById(R.id.company_reg_date);        // company_state=view.findViewById(R.id.company_state);        company_roc=view.findViewById(R.id.company_roc);        company_status=view.findViewById(R.id.company_status);        company_cat=view.findViewById(R.id.company_cat);        company_class=view.findViewById(R.id.company_class);        company_sub_cat=view.findViewById(R.id.company_sub_cat);        company_auth_cap=view.findViewById(R.id.company_auth_cap);        company_paid_cap=view.findViewById(R.id.company_paid_cap);        /*company_act_code=view.findViewById(R.id.company_act_code);        company_act_des=view.findViewById(R.id.company_act_des);*/        company_reg_address=view.findViewById(R.id.company_reg_address);        company_add_other_ro=view.findViewById(R.id.company_add_other_ro);        company_email=view.findViewById(R.id.company_email);        company_last_agm=view.findViewById(R.id.company_last_agm);        company_last_balancesheet=view.findViewById(R.id.company_last_balancesheet);        company_listing_status=view.findViewById(R.id.company_listing_status);        company_active_com=view.findViewById(R.id.company_active_com);       /* company_active_com=view.findViewById(R.id.company_active_com);        company_fillting_status=view.findViewById(R.id.company_fillting_status);        company_susp_stock=view.findViewById(R.id.company_susp_stock);*/        company_member=view.findViewById(R.id.company_member);        company_type=view.findViewById(R.id.company_type);        company_susp_stock=view.findViewById(R.id.company_susp_stock);        //  status=view.findViewById(R.id.status);       /* company_country=view.findViewById(R.id.company_country);        company_f_share=view.findViewById(R.id.company_f_share);        company_type_of_office=view.findViewById(R.id.company_type_of_office);*/        //company_for_det=view.findViewById(R.id.company_for_det);       /* company_pan=view.findViewById(R.id.company_pan);        company_get_data=view.findViewById(R.id.company_get_data);*/       /* company_time_stamp=view.findViewById(R.id.company_time_stamp);        company_file=view.findViewById(R.id.company_file);        company_updated=view.findViewById(R.id.company_updated);*/        /*company_sign_det=view.findViewById(R.id.company_sign_det);        company_pre_firm=view.findViewById(R.id.company_pre_firm);        company_sol_field=view.findViewById(R.id.company_sol_field);        company_vpd=view.findViewById(R.id.company_vpd);        company_d_satus=view.findViewById(R.id.company_d_satus);*/        company_car_id=view.findViewById(R.id.company_car_id);        company_car_cin=view.findViewById(R.id.company_car_cin);        company_char_sol_no=view.findViewById(R.id.company_char_sol_no);        company_char_id=view.findViewById(R.id.company_char_id);        company_char_srn=view.findViewById(R.id.company_char_srn);        company_char_holder=view.findViewById(R.id.company_char_holder);        company_date_mod=view.findViewById(R.id.company_date_mod);        company_char_date_sat=view.findViewById(R.id.company_char_date_sat);        company_char_amount=view.findViewById(R.id.company_char_amount);        company_char_addres=view.findViewById(R.id.company_char_addres);        company_char_hash=view.findViewById(R.id.company_char_hash);        company_char_timestamp=view.findViewById(R.id.company_char_timestamp);        company_char_status=view.findViewById(R.id.company_char_status);        textView_no_data=view.findViewById(R.id.textView_no_data);        intent_no = getArguments().getString("no");        getDirDetails();        getCompanyDetails();        getCompanyCharges();       /* textView_dir_name.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getActivity(), Director_Related_comp.class);                intent.putExtra("din",textView_din.getText().toString());                startActivity(intent);            }        });        textView_dir_name1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getActivity(), Director_Related_comp.class);                intent.putExtra("din",textView_din1.getText().toString());                startActivity(intent);            }        });*/        imageView_refres_compnay.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                refreshCompany(textView_cin_no.getText().toString());            }        });        isStoragePermissionGrantedagain();        fn_permission();;        return  view;    }    private void refreshCompany(String cinNumber) {        progress_bar.setVisibility(View.VISIBLE);        mRequestQueue = Volley.newRequestQueue(getActivity());        String url = "https://api.finanvo.in/config/refresh/company?CIN="+cinNumber;        JsonObjectRequest                jsonObjectRequest                = new JsonObjectRequest(                Request.Method.GET,                url,                null,                new Response.Listener() {                    @Override                    public void onResponse(Object response) {                        Gson gson = new Gson();                        RefreshComapnyResp refreshComapnyResp;                        refreshComapnyResp = gson.fromJson(response.toString(),RefreshComapnyResp.class);                        Toast.makeText(getActivity(), "Message"+refreshComapnyResp.getMessage(), Toast.LENGTH_LONG).show();                        getCompanyDetails();                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error)                    {                        progress_bar.setVisibility(View.GONE);                        // Toast.makeText(getActivity(), "Invalid CIN Number !", Toast.LENGTH_SHORT).show();                    }                })        {            //This is for Headers If You Needed            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                Map<String, String> paramss = new HashMap<String, String>();                paramss.put("x-api-key", "j9g1z0f92C");                paramss.put("x-api-secret-key", "sVgSRmUs54i56tcBIsLjgd1trdLsSPbZCZKiRu5c");                return paramss;            }            //Pass Your Parameters here            @Override            protected Map<String, String> getParams() {                Map<String, String> params = new HashMap<String, String>();                params.put("CIN", cinNumber);                return params;            }        };        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(10000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        mRequestQueue.add(jsonObjectRequest);    }    void   getCompanyDetails(){        progress_bar.setVisibility(View.VISIBLE);        mRequestQueue = Volley.newRequestQueue(getActivity());        String url = "https://api.finanvo.in/company/profile?CIN="+intent_no;        JsonObjectRequest                jsonObjectRequest                = new JsonObjectRequest(                Request.Method.GET,                url,                null,                new Response.Listener() {                    @Override                    public void onResponse(Object response) {                        Gson gson = new Gson();                        CompaySeacrhProfilePojoModel seacrhProfilePojoModel;                        seacrhProfilePojoModel = gson.fromJson(response.toString(),CompaySeacrhProfilePojoModel.class);                        company_nam=seacrhProfilePojoModel.getData().getCOMPANY_NAME();                        textView_name.setText(seacrhProfilePojoModel.getData().getCOMPANY_NAME());                        textView_address.setText(seacrhProfilePojoModel.getData().getREGISTERED_OFFICE_ADDRESS());                        textView_detais1.setText(seacrhProfilePojoModel.getData().getCOMPANY_NAME()+" is a "+seacrhProfilePojoModel.getData().getCLASS()+" incorporated on "+seacrhProfilePojoModel.getData().getDATE_OF_REGISTRATION()+". It is classified as "+seacrhProfilePojoModel.getData().getSUBCATEGORY()+" and is registered at Registrar of Companies, "+seacrhProfilePojoModel.getData().getROC()+". Its authorized share capital is Rs. "+seacrhProfilePojoModel.getData().getAUTHORIZED_CAPITAL()+" and its paid up capital is Rs. "+seacrhProfilePojoModel.getData().getPAIDUP_CAPITAL()+". It is inolved in Business activities n.e.c.\n" +                                seacrhProfilePojoModel.getData().getCOMPANY_NAME()+" Annual General Meeting (AGM) was last held on "+seacrhProfilePojoModel.getData().getLAST_AGM()+" and as per records from Ministry of Corporate Affairs (MCA), its balance sheet was last filed on "+seacrhProfilePojoModel.getData().getLAST_BALANCESHEET());                        textView_detais2.setText("Directors of "+seacrhProfilePojoModel.getData().getCOMPANY_NAME()+" are "+dir1Name+" and "+dir2Name+".");                        textView_detais3.setText(seacrhProfilePojoModel.getData().getCOMPANY_NAME()+" Corporate Identification Number is (CIN) "+seacrhProfilePojoModel.getData().getCIN()+" and its registration number is "+seacrhProfilePojoModel.getData().getID()+".Its Email address is "+seacrhProfilePojoModel.getData().getEMAIL()+" and its registered address is "+seacrhProfilePojoModel.getData().getREGISTERED_OFFICE_ADDRESS());                        timeCalculater(seacrhProfilePojoModel.getData().getDATE_OF_REGISTRATION());                        textView_id.setText(seacrhProfilePojoModel.getData().getID());                        textView_cin_no.setText(seacrhProfilePojoModel.getData().getCIN());                        company_name_sec.setText(seacrhProfilePojoModel.getData().getCOMPANY_NAME());                        company_reg_date.setText(seacrhProfilePojoModel.getData().getDATE_OF_REGISTRATION());                        // company_state.setText(seacrhProfilePojoModel.getData().getSTATE());                        company_roc.setText(seacrhProfilePojoModel.getData().getROC());                        company_status.setText(seacrhProfilePojoModel.getData().getSTATUS());                        company_cat.setText(seacrhProfilePojoModel.getData().getCATEGORY());                        company_class.setText(seacrhProfilePojoModel.getData().getCLASS());                        company_sub_cat.setText(seacrhProfilePojoModel.getData().getSUBCATEGORY());                        company_auth_cap.setText(seacrhProfilePojoModel.getData().getAUTHORIZED_CAPITAL());                        company_paid_cap.setText(seacrhProfilePojoModel.getData().getPAIDUP_CAPITAL());                        //company_act_code.setText(seacrhProfilePojoModel.getData().getACTIVITY_CODE());                        //company_act_des.setText(seacrhProfilePojoModel.getData().getACTIVITY_DESCRIPTION());                        company_reg_address.setText(seacrhProfilePojoModel.getData().getREGISTERED_OFFICE_ADDRESS());                        company_add_other_ro.setText(seacrhProfilePojoModel.getData().getADDRESS_OTHER_THAN_RO());                        company_email.setText(seacrhProfilePojoModel.getData().getEMAIL());                        company_last_agm.setText(seacrhProfilePojoModel.getData().getLAST_AGM());                        company_last_balancesheet.setText(seacrhProfilePojoModel.getData().getLAST_BALANCESHEET());                        company_susp_stock.setText(seacrhProfilePojoModel.getData().getSUSPENDED_AT_STOCK());                        company_listing_status.setText(seacrhProfilePojoModel.getData().getLISTING_STATUS());                        company_active_com.setText(seacrhProfilePojoModel.getData().getACTIVE_COMPLIANCE());                           /* company_active_com.setText(seacrhProfilePojoModel.getData().getACTIVE_COMPLIANCE());                            company_fillting_status.setText(seacrhProfilePojoModel.getData().getCOMPANY_FILING_STATUS_16_17_18());                            company_susp_stock.setText(seacrhProfilePojoModel.getData().getSUSPENDED_AT_STOCK());*/                        company_member.setText(seacrhProfilePojoModel.getData().getNUMBER_OF_MEMBERS());                           /* company_partners.setText(seacrhProfilePojoModel.getData().getPARTNERS());                            company_cirp.setText(seacrhProfilePojoModel.getData().getCIRP());*/                        company_type.setText(seacrhProfilePojoModel.getData().getTYPE_OF_COMPANY());                        //status.setText(seacrhProfilePojoModel.getData().getSTATUS());                            /*company_country.setText(seacrhProfilePojoModel.getData().getCOUNTRY_INC());                            company_f_share.setText(seacrhProfilePojoModel.getData().getF_COMPANY_SHARE_CAP());                            company_type_of_office.setText(seacrhProfilePojoModel.getData().getTYPE_OF_OFFICE());*/                        // company_for_det.setText(seacrhProfilePojoModel.getData().getFOREIGN_DETAILS());                            /*company_pan.setText(seacrhProfilePojoModel.getData().getPAN());                            company_get_data.setText(seacrhProfilePojoModel.getData().getGETDATA());*/                           /* company_time_stamp.setText(seacrhProfilePojoModel.getData().getTIMESTAMP());                            company_file.setText(seacrhProfilePojoModel.getData().getFILE());                            company_updated.setText(seacrhProfilePojoModel.getData().getUPDATED());*/                            /*company_sign_det.setText(seacrhProfilePojoModel.getData().getSIGNDETAILS());                            company_pre_firm.setText(seacrhProfilePojoModel.getData().getPREVIOUS_FIRM());                            company_sol_field.setText(seacrhProfilePojoModel.getData().getSOLVENCY_FILED());                            company_vpd.setText(seacrhProfilePojoModel.getData().getVPD());                            company_d_satus.setText(seacrhProfilePojoModel.getData().getdStatus());*/                        //  Toast.makeText(getActivity(), "Response"+response.toString(), Toast.LENGTH_SHORT).show();                        progress_bar.setVisibility(View.GONE);                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error)                    {                        progress_bar.setVisibility(View.GONE);                        //  Toast.makeText(getActivity(), "Invalid CIN Number !", Toast.LENGTH_SHORT).show();                    }                })        {            //This is for Headers If You Needed            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                Map<String, String> paramss = new HashMap<String, String>();                paramss.put("x-api-key", "j9g1z0f92C");                paramss.put("x-api-secret-key", "sVgSRmUs54i56tcBIsLjgd1trdLsSPbZCZKiRu5c");                return paramss;            }            //Pass Your Parameters here            @Override            protected Map<String, String> getParams() {                Map<String, String> params = new HashMap<String, String>();                params.put("CIN", intent_no);                return params;            }        };        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(10000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        mRequestQueue.add(jsonObjectRequest);    }    void   getDirDetails(){        progress_bar.setVisibility(View.VISIBLE);        mRequestQueue = Volley.newRequestQueue(getActivity());        String url = "https://api.finanvo.in/company/directors?CIN="+intent_no;        JsonObjectRequest                jsonObjectRequest                = new JsonObjectRequest(                Request.Method.GET,                url,                null,                new Response.Listener() {                    @Override                    public void onResponse(Object response) {                        Gson gson = new Gson();                        SerachDirectorListPojoModel serachDirectorListPojoModel;                        serachDirectorListPojoModel = gson.fromJson(response.toString(),SerachDirectorListPojoModel.class);                        if (serachDirectorListPojoModel.getData().size()>0) {                            dir_sarch_arrayList_name=serachDirectorListPojoModel.getData();                            recycleView_dir_det.setLayoutManager(new LinearLayoutManager(getActivity() ));                            Director_details_list_adapter adapter = new Director_details_list_adapter(getActivity(),dir_sarch_arrayList_name);                            recycleView_dir_det.setAdapter(adapter);                        }else {                        }                        // Toast.makeText(getActivity(), "Response"+response.toString(), Toast.LENGTH_SHORT).show();                        progress_bar.setVisibility(View.GONE);                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error)                    {                        progress_bar.setVisibility(View.GONE);                        //Toast.makeText(getActivity(), "Invalid CIN Number !", Toast.LENGTH_SHORT).show();                    }                })        {            //This is for Headers If You Needed            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                Map<String, String> paramss = new HashMap<String, String>();                paramss.put("x-api-key", "j9g1z0f92C");                paramss.put("x-api-secret-key", "sVgSRmUs54i56tcBIsLjgd1trdLsSPbZCZKiRu5c");                return paramss;            }            //Pass Your Parameters here            @Override            protected Map<String, String> getParams() {                Map<String, String> params = new HashMap<String, String>();                params.put("CIN", intent_no);                return params;            }        };        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(10000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        mRequestQueue.add(jsonObjectRequest);    }    void   getCompanyCharges(){        progress_bar.setVisibility(View.VISIBLE);        mRequestQueue = Volley.newRequestQueue(getActivity());        String url = "https://api.finanvo.in/company/charges?CIN="+intent_no;        JsonObjectRequest                jsonObjectRequest                = new JsonObjectRequest(                Request.Method.GET,                url,                null,                new Response.Listener() {                    @Override                    public void onResponse(Object response) {                        Gson gson = new Gson();                        CompanyChargeModel companyChargeModel;                        companyChargeModel = gson.fromJson(response.toString(),CompanyChargeModel.class);                        if (companyChargeModel.getData().size()>0) {                            String str=companyChargeModel.getData().get(0).getCHARGE_ID();                            arrayList_name=companyChargeModel.getData();                            recycleView_comp_chares.setLayoutManager(new LinearLayoutManager(getActivity() ));                            Compnay_charges_list_adapter adapter = new Compnay_charges_list_adapter(getActivity(),arrayList_name);                            recycleView_comp_chares.setAdapter(adapter);                            textView_no_data.setVisibility(View.GONE);                        }                        else {                            textView_no_data.setVisibility(View.VISIBLE);                        }                        // Toast.makeText(getActivity(), "Response"+response.toString(), Toast.LENGTH_SHORT).show();                        progress_bar.setVisibility(View.GONE);                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error)                    {                        progress_bar.setVisibility(View.GONE);                        textView_no_data.setVisibility(View.VISIBLE);                        Toast.makeText(getActivity(), "Invalid CIN Number !"+error, Toast.LENGTH_SHORT).show();                    }                })        {            //This is for Headers If You Needed            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                Map<String, String> paramss = new HashMap<String, String>();                paramss.put("x-api-key", "j9g1z0f92C");                paramss.put("x-api-secret-key", "sVgSRmUs54i56tcBIsLjgd1trdLsSPbZCZKiRu5c");                return paramss;            }            //Pass Your Parameters here            @Override            protected Map<String, String> getParams() {                Map<String, String> params = new HashMap<String, String>();                params.put("CIN", intent_no);                return params;            }        };        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(10000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        mRequestQueue.add(jsonObjectRequest);    }    private void shareImage(Uri imagePath) {        Intent shareIntent = new Intent();        shareIntent.setAction(Intent.ACTION_SEND);        shareIntent.putExtra(Intent.EXTRA_STREAM, imagePath);        shareIntent.setType("image/*");        // Launch sharing dialog for image        startActivity(Intent.createChooser(shareIntent, "Share Image"));    }    public void SaveClick(){        progress_bar.setVisibility(View.VISIBLE);        File file = createPdf(getActivity(), framLayout);        if (file != null) {            //Uri uri = Uri.parse(file.getAbsolutePath());            Uri uri = FileProvider.getUriForFile(getActivity(),                    getActivity().getPackageName() + ".provider", file);            shareImage(uri);            progress_bar.setVisibility(View.GONE);            Log.i("TAG", "Drawing saved to the gallery!");        } else {            progress_bar.setVisibility(View.GONE);            Log.i("TAG", "Oops! Image could not be saved.");        }    }    private File createPdf(Context context, View drawView){        Bitmap bitmap =getBitmapFromView(drawView);        WindowManager wm = (WindowManager) getActivity().getSystemService(Context.WINDOW_SERVICE);        Display display = wm.getDefaultDisplay();        DisplayMetrics displaymetrics = new DisplayMetrics();        getActivity().getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);        float hight = displaymetrics.heightPixels ;        float width = displaymetrics.widthPixels ;        int convertHighet = (int) hight, convertWidth = (int) width;//        Resources mResources = getResources();//        Bitmap bitmap = BitmapFactory.decodeResource(mResources, R.drawable.screenshot);        PdfDocument document = new PdfDocument();        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(bitmap.getWidth(), bitmap.getHeight(), 1).create();        PdfDocument.Page page = document.startPage(pageInfo);        Canvas canvas = page.getCanvas();        Paint paint = new Paint();        paint.setColor(Color.parseColor("#ffffff"));        canvas.drawPaint(paint);        bitmap = Bitmap.createScaledBitmap(bitmap, bitmap.getWidth(), bitmap.getHeight(), true);        paint.setColor(Color.BLUE);        canvas.drawBitmap(bitmap, 0, 0 , null);        document.finishPage(page);        File pictureFileDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),"Company Adda");        if (!pictureFileDir.exists()) {            boolean isDirectoryCreated = pictureFileDir.mkdirs();            if(!isDirectoryCreated)                Log.i("TAG", "Can't create directory to save the image");        }        String filename = pictureFileDir.getPath() +File.separator+ System.currentTimeMillis()+".pdf";        File pictureFile = new File(filename);        try {            document.writeTo(new FileOutputStream(pictureFile));        } catch (IOException e) {            e.printStackTrace();            Toast.makeText(getActivity(), "Something wrong: " + e.toString(), Toast.LENGTH_LONG).show();        }        // close the document        document.close();        // scanGallery( context,pictureFile.getAbsolutePath());        return pictureFile;    }    private File saveBitMap(Context context, View drawView){        File pictureFileDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),"Logicchip");        if (!pictureFileDir.exists()) {            boolean isDirectoryCreated = pictureFileDir.mkdirs();            if(!isDirectoryCreated)                Log.i("TAG", "Can't create directory to save the image");            return null;        }        String filename = pictureFileDir.getPath() +File.separator+ System.currentTimeMillis()+".jpg";        File pictureFile = new File(filename);        Bitmap bitmap =getBitmapFromView(drawView);        try {            pictureFile.createNewFile();            FileOutputStream oStream = new FileOutputStream(pictureFile);            bitmap.compress(Bitmap.CompressFormat.PNG, 100, oStream);            oStream.flush();            oStream.close();        } catch (IOException e) {            e.printStackTrace();            Log.i("TAG", "There was an issue saving the image.");        }        scanGallery( context,pictureFile.getAbsolutePath());        return pictureFile;    }    //create bitmap from view and returns it    private Bitmap getBitmapFromView(View view) {        int totalHeight = z.getChildAt(0).getHeight();        int totalWidth = z.getChildAt(0).getWidth();        //Define a bitmap with the same size as the view        Bitmap returnedBitmap = Bitmap.createBitmap(totalWidth, totalHeight,Bitmap.Config.ARGB_8888);        //Bind a canvas to it        Canvas canvas = new Canvas(returnedBitmap);        //Get the view's background        Drawable bgDrawable =view.getBackground();        if (bgDrawable!=null) {            //has background drawable, then draw it on the canvas            bgDrawable.draw(canvas);        }   else{            //does not have background drawable, then draw white background on the canvas            canvas.drawColor(Color.WHITE);        }        // draw the view on the canvas        view.draw(canvas);        //return the bitmap        return returnedBitmap;    }    // used for scanning gallery    private void scanGallery(Context cntx, String path) {        try {            MediaScannerConnection.scanFile(cntx, new String[]{path}, null, new MediaScannerConnection.OnScanCompletedListener() {                public void onScanCompleted(String path, Uri uri) {                }            });        } catch (Exception e) {            e.printStackTrace();            Log.i("TAG", "There was an issue scanning gallery.");        }    }    public boolean isStoragePermissionGrantedagain() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if (getActivity().checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)                    == PackageManager.PERMISSION_GRANTED) {                return true;            } else {                Toast.makeText(getActivity(), "Permission is denied", Toast.LENGTH_SHORT).show();                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);                return false;            }        } else { //permission is automatically granted on sdk<23 upon installation            //Toast.makeText(this, "Permission is granted", Toast.LENGTH_SHORT).show();            return true;        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        switch (requestCode) {            case REQUEST_CODE_ASK_PERMISSIONS:                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    // Permission Granted                    Toast.makeText(getActivity(), "Permission Granted", Toast.LENGTH_SHORT)                            .show();                } else {                    // Permission Denied                    Toast.makeText(getActivity(), "Permission Denied", Toast.LENGTH_SHORT)                            .show();                }                break;            default:                super.onRequestPermissionsResult(requestCode, permissions, grantResults);        }    }    private void fn_permission() {        if ((ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)||                (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)) {            if ((ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), android.Manifest.permission.READ_EXTERNAL_STORAGE))) {            } else {                ActivityCompat.requestPermissions(getActivity(), new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE},                        REQUEST_PERMISSIONS);            }            if ((ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE))) {            } else {                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},                        REQUEST_PERMISSIONS);            }        }    }    void timeCalculater(String time){        String first_time=time.substring(0,10);        //String last_time=time.substring(11,19);        //String toyBornTime = "2014-06-18 12:56:50";        //String toyBornTime = first_time+" "+last_time;        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");        try {            Date oldDate = dateFormat.parse(first_time);            System.out.println(oldDate);            Date currentDate = new Date();            long diff = currentDate.getTime() - oldDate.getTime();            long seconds = diff / 1000;            long minutes = seconds / 60;            long hours = minutes / 60;            long days = hours / 24;            long month = days / 30;            long year = month / 12;            if (month>=12) {                long leftmonth = year * 12;                long finalmonth = month - leftmonth;                long dayleftyera=year*365;                long day_left_month=finalmonth*30;                long final_day=dayleftyera+day_left_month;                long super_final_day=days-final_day;                company_time_stamp.setText(year + " Years " + finalmonth + " Month "+super_final_day +" Days ");            }else {                long day_left_month=month*30;                long final_day=days-day_left_month;                company_time_stamp.setText(month + " Months "+final_day+" Days");            }            if (oldDate.before(currentDate)) {                Log.e("oldDate", "is previous date");                Log.e("Difference: ", " seconds: " + seconds + " minutes: " + minutes                        + " hours: " + hours + " days: " + days);            }            // Log.e("toyBornTime", "" + toyBornTime);        } catch (ParseException e) {            e.printStackTrace();        }    }}